// EJML BUNDLER
plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

def ejmlVersion = '0.43.1'

java {
	version = '0.43.1'
	tasks.withType(Javadoc).all { enabled = false }
}

configurations {
	ejml
}

jar {
    from {
        configurations.ejml.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

dependencies {
	ejml 'org.ejml:ejml-simple:' + ejmlVersion
	ejml 'org.ejml:ejml-core:' + ejmlVersion
	ejml 'org.ejml:ejml-fdense:' + ejmlVersion
	ejml 'org.ejml:ejml-ddense:' + ejmlVersion
	ejml 'org.ejml:ejml-cdense:' + ejmlVersion
	ejml 'org.ejml:ejml-zdense:' + ejmlVersion
	ejml 'org.ejml:ejml-dsparse:' + ejmlVersion
	ejml 'org.ejml:ejml-fsparse:' + ejmlVersion
}

signing {
    sign configurations.archives
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

publishing {
    repositories {
        mavenLocal()
    }
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.name
            groupId = group
            from components.java
                        
            pom {
                name = project.name
                description = "$projectDescription"
                url = "$projectUrl"
                inceptionYear = "$projectInceptionYear"
                organization {
                    name = "$projectVendor"
                    url  = "$projectVendorUrl"
                }
                licenses {
                    license {
                        name = "$projectLicense"
                        url  = "$projectLicenseUrl"
                    }
                }
                issueManagement {
                    system = "Github Issues"
                    url = "$projectIssues"
                }
                developers {
                    developer {
                        id = "$projectDeveloperId"
                        name = "$projectDeveloper"
                        email = "$projectDeveloperMail"
                    }
                }
                scm {
                    connection = "scm:git:$projectScm"
                    developerConnection = "scm:git:$projectScm"
                    url = "$projectUrl"
                }
            }
            
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }
            
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }
}