// ROOT PROJECT
plugins {
   id "java"
   id "jacoco"
   id "com.github.hierynomus.license-base" version "0.16.1"
   id "org.sonarqube" version "3.0"
}

allprojects {
    repositories {
    	mavenLocal()
        mavenCentral()
    }

    apply plugin: 'java-library'
    apply plugin: 'jacoco'
    apply plugin: 'org.sonarqube'
    apply plugin: 'com.github.hierynomus.license-base'
    apply plugin: 'signing'
	apply plugin: 'project-report'
	
    group = 'net.raumzeitfalle.registration'
    version = '0.0.5'

    java {
    	sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8

		withJavadocJar()
    	withSourcesJar()
    }
    
    artifacts {
    	archives javadocJar, sourcesJar
	}
	
	dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.0'
        testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.0'
        testRuntimeOnly    'org.junit.jupiter:junit-jupiter-engine:5.8.0'
	}
	
	tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    sonarqube {
        properties {
            property "sonar.host.url", "https://sonarcloud.io"
            property "sonar.projectKey", System.getenv('SONARCLOUD_PROJECT_KEY')
            property "sonar.login", System.getenv('SONARCLOUD_LOGIN')
            property "sonar.organization", System.getenv('SONARCLOUD_ORG')
        }
    }
	
   jacocoTestReport {
	reports {
             xml.enabled true
             csv.enabled false
             html.enabled true
        }
    }
    
	test {
	    finalizedBy jacocoTestReport
	}
	
	jacocoTestReport {
	    dependsOn test
	}
	
	htmlDependencyReport {
    	projects = project.allprojects
	}
	
	tasks.register("codeCoverageReport", JacocoReport) {
    	// If a subproject applies the 'jacoco' plugin, add the result it to the report
	    subprojects { subproject ->
	        subproject.plugins.withType(JacocoPlugin).configureEach {
	            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach { testTask ->
	                sourceSets subproject.sourceSets.main
	                executionData(testTask)
	            }
	
	            // To automatically run `test` every time `./gradlew codeCoverageReport` is called,
	            // you may want to set up a task dependency between them as shown below.
	            // Note that this requires the `test` tasks to be resolved eagerly (see `forEach`) which
	            // may have a negative effect on the configuration time of your build.
	            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).forEach {
	                rootProject.tasks.codeCoverageReport.dependsOn(it)
	            }
	        }
	    }

   	 	// enable the different report types (html, xml, csv)
	    reports {
	        // xml is usually used to integrate code coverage with
	        // other tools like SonarQube, Coveralls or Codecov
	        xml.enabled true
	
	        // HTML reports can be used to see code coverage
	        // without any external tools
	        html.enabled true
	    }
	}
}

wrapper {
    distributionType = Wrapper.DistributionType.BIN
    gradleVersion = "7.2"
}
